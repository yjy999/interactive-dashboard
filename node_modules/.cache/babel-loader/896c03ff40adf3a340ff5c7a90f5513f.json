{"remainingRequest":"C:\\Users\\13089\\Desktop\\可视化\\interactive dashboard\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\13089\\Desktop\\可视化\\interactive dashboard\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\13089\\Desktop\\可视化\\interactive dashboard\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\13089\\Desktop\\可视化\\interactive dashboard\\node_modules\\@jiaminghi\\data-view\\lib\\components\\conicalColumnChart\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\13089\\Desktop\\可视化\\interactive dashboard\\node_modules\\@jiaminghi\\data-view\\lib\\components\\conicalColumnChart\\src\\main.vue","mtime":1671028687309},{"path":"C:\\Users\\13089\\Desktop\\可视化\\interactive dashboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1671028697199},{"path":"C:\\Users\\13089\\Desktop\\可视化\\interactive dashboard\\node_modules\\babel-loader\\lib\\index.js","mtime":1671028696531},{"path":"C:\\Users\\13089\\Desktop\\可视化\\interactive dashboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1671028697199},{"path":"C:\\Users\\13089\\Desktop\\可视化\\interactive dashboard\\node_modules\\vue-loader\\lib\\index.js","mtime":1671028778473}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiQzovVXNlcnMvMTMwODkvRGVza3RvcC9cdTUzRUZcdTg5QzZcdTUzMTYvaW50ZXJhY3RpdmUgZGFzaGJvYXJkL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGF1dG9SZXNpemUgZnJvbSAnLi4vLi4vLi4vbWl4aW4vYXV0b1Jlc2l6ZSc7CmltcG9ydCB7IGRlZXBNZXJnZSB9IGZyb20gJ0BqaWFtaW5naGkvY2hhcnRzL2xpYi91dGlsL2luZGV4JzsKaW1wb3J0IHsgZGVlcENsb25lIH0gZnJvbSAnQGppYW1pbmdoaS9jLXJlbmRlci9saWIvcGx1Z2luL3V0aWwnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0R2Q29uaWNhbENvbHVtbkNoYXJ0JywKICBtaXhpbnM6IFthdXRvUmVzaXplXSwKICBwcm9wczogewogICAgY29uZmlnOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIHt9OwogICAgICB9CiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcmVmOiAnY29uaWNhbC1jb2x1bW4tY2hhcnQnLAogICAgICBkZWZhdWx0Q29uZmlnOiB7CiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIENoYXJ0IGRhdGEKICAgICAgICAgKiBAdHlwZSB7QXJyYXk8T2JqZWN0Pn0KICAgICAgICAgKiBAZGVmYXVsdCBkYXRhID0gW10KICAgICAgICAgKi8KICAgICAgICBkYXRhOiBbXSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIENoYXJ0IGltZwogICAgICAgICAqIEB0eXBlIHtBcnJheTxTdHJpbmc+fQogICAgICAgICAqIEBkZWZhdWx0IGltZyA9IFtdCiAgICAgICAgICovCiAgICAgICAgaW1nOiBbXSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIENoYXJ0IGZvbnQgc2l6ZQogICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgICAgICogQGRlZmF1bHQgZm9udFNpemUgPSAxMgogICAgICAgICAqLwogICAgICAgIGZvbnRTaXplOiAxMiwKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIEltZyBzaWRlIGxlbmd0aAogICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgICAgICogQGRlZmF1bHQgaW1nU2lkZUxlbmd0aCA9IDMwCiAgICAgICAgICovCiAgICAgICAgaW1nU2lkZUxlbmd0aDogMzAsCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb2x1bW4gY29sb3IKICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAqIEBkZWZhdWx0IGNvbHVtbkNvbG9yID0gJ3JnYmEoMCwgMTk0LCAyNTUsIDAuNCknCiAgICAgICAgICovCiAgICAgICAgY29sdW1uQ29sb3I6ICdyZ2JhKDAsIDE5NCwgMjU1LCAwLjQpJywKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRleHQgY29sb3IKICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAqIEBkZWZhdWx0IHRleHRDb2xvciA9ICcjZmZmJwogICAgICAgICAqLwogICAgICAgIHRleHRDb2xvcjogJyNmZmYnLAoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2hvdyB2YWx1ZQogICAgICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICAgICAqIEBkZWZhdWx0IHNob3dWYWx1ZSA9IGZhbHNlCiAgICAgICAgICovCiAgICAgICAgc2hvd1ZhbHVlOiBmYWxzZQogICAgICB9LAogICAgICBtZXJnZWRDb25maWc6IG51bGwsCiAgICAgIGNvbHVtbjogW10KICAgIH07CiAgfSwKICB3YXRjaDogewogICAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcoKSB7CiAgICAgIHZhciBjYWxjRGF0YSA9IHRoaXMuY2FsY0RhdGE7CiAgICAgIGNhbGNEYXRhKCk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBhZnRlckF1dG9SZXNpemVNaXhpbkluaXQ6IGZ1bmN0aW9uIGFmdGVyQXV0b1Jlc2l6ZU1peGluSW5pdCgpIHsKICAgICAgdmFyIGNhbGNEYXRhID0gdGhpcy5jYWxjRGF0YTsKICAgICAgY2FsY0RhdGEoKTsKICAgIH0sCiAgICBvblJlc2l6ZTogZnVuY3Rpb24gb25SZXNpemUoKSB7CiAgICAgIHZhciBjYWxjRGF0YSA9IHRoaXMuY2FsY0RhdGE7CiAgICAgIGNhbGNEYXRhKCk7CiAgICB9LAogICAgY2FsY0RhdGE6IGZ1bmN0aW9uIGNhbGNEYXRhKCkgewogICAgICB2YXIgbWVyZ2VDb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnLAogICAgICAgICAgaW5pdERhdGEgPSB0aGlzLmluaXREYXRhLAogICAgICAgICAgY2FsY1NWR1BhdGggPSB0aGlzLmNhbGNTVkdQYXRoOwogICAgICBtZXJnZUNvbmZpZygpOwogICAgICBpbml0RGF0YSgpOwogICAgICBjYWxjU1ZHUGF0aCgpOwogICAgfSwKICAgIG1lcmdlQ29uZmlnOiBmdW5jdGlvbiBtZXJnZUNvbmZpZygpIHsKICAgICAgdmFyIGRlZmF1bHRDb25maWcgPSB0aGlzLmRlZmF1bHRDb25maWcsCiAgICAgICAgICBjb25maWcgPSB0aGlzLmNvbmZpZzsKICAgICAgdGhpcy5tZXJnZWRDb25maWcgPSBkZWVwTWVyZ2UoZGVlcENsb25lKGRlZmF1bHRDb25maWcsIHRydWUpLCBjb25maWcgfHwge30pOwogICAgfSwKICAgIGluaXREYXRhOiBmdW5jdGlvbiBpbml0RGF0YSgpIHsKICAgICAgdmFyIG1lcmdlZENvbmZpZyA9IHRoaXMubWVyZ2VkQ29uZmlnOwogICAgICB2YXIgZGF0YSA9IG1lcmdlZENvbmZpZy5kYXRhOwogICAgICBkYXRhID0gZGVlcENsb25lKGRhdGEsIHRydWUpOwogICAgICBkYXRhLnNvcnQoZnVuY3Rpb24gKF9yZWYsIF9yZWYyKSB7CiAgICAgICAgdmFyIGEgPSBfcmVmLnZhbHVlOwogICAgICAgIHZhciBiID0gX3JlZjIudmFsdWU7CiAgICAgICAgaWYgKGEgPiBiKSByZXR1cm4gLTE7CiAgICAgICAgaWYgKGEgPCBiKSByZXR1cm4gMTsKICAgICAgICBpZiAoYSA9PT0gYikgcmV0dXJuIDA7CiAgICAgIH0pOwogICAgICB2YXIgbWF4ID0gZGF0YVswXSA/IGRhdGFbMF0udmFsdWUgOiAxMDsKICAgICAgZGF0YSA9IGRhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaXRlbSksIHt9LCB7CiAgICAgICAgICBwZXJjZW50OiBpdGVtLnZhbHVlIC8gbWF4CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICBtZXJnZWRDb25maWcuZGF0YSA9IGRhdGE7CiAgICB9LAogICAgY2FsY1NWR1BhdGg6IGZ1bmN0aW9uIGNhbGNTVkdQYXRoKCkgewogICAgICB2YXIgbWVyZ2VkQ29uZmlnID0gdGhpcy5tZXJnZWRDb25maWcsCiAgICAgICAgICB3aWR0aCA9IHRoaXMud2lkdGgsCiAgICAgICAgICBoZWlnaHQgPSB0aGlzLmhlaWdodDsKICAgICAgdmFyIGltZ1NpZGVMZW5ndGggPSBtZXJnZWRDb25maWcuaW1nU2lkZUxlbmd0aCwKICAgICAgICAgIGZvbnRTaXplID0gbWVyZ2VkQ29uZmlnLmZvbnRTaXplLAogICAgICAgICAgZGF0YSA9IG1lcmdlZENvbmZpZy5kYXRhOwogICAgICB2YXIgaXRlbU51bSA9IGRhdGEubGVuZ3RoOwogICAgICB2YXIgZ2FwID0gd2lkdGggLyAoaXRlbU51bSArIDEpOwogICAgICB2YXIgdXNlQWJsZUhlaWdodCA9IGhlaWdodCAtIGltZ1NpZGVMZW5ndGggLSBmb250U2l6ZSAtIDU7CiAgICAgIHZhciBzdmdCb3R0b20gPSBoZWlnaHQgLSBmb250U2l6ZSAtIDU7CiAgICAgIHRoaXMuY29sdW1uID0gZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGkpIHsKICAgICAgICB2YXIgcGVyY2VudCA9IGl0ZW0ucGVyY2VudDsKICAgICAgICB2YXIgbWlkZGxlWFBvcyA9IGdhcCAqIChpICsgMSk7CiAgICAgICAgdmFyIGxlZnRYUG9zID0gZ2FwICogaTsKICAgICAgICB2YXIgcmlnaHRYcG9zID0gZ2FwICogKGkgKyAyKTsKICAgICAgICB2YXIgbWlkZGxlWVBvcyA9IHN2Z0JvdHRvbSAtIHVzZUFibGVIZWlnaHQgKiBwZXJjZW50OwogICAgICAgIHZhciBjb250cm9sWVBvcyA9IHVzZUFibGVIZWlnaHQgKiBwZXJjZW50ICogMC42ICsgbWlkZGxlWVBvczsKICAgICAgICB2YXIgZCA9ICJcbiAgICAgICAgICBNIi5jb25jYXQobGVmdFhQb3MsICIsICIpLmNvbmNhdChzdmdCb3R0b20sICJcbiAgICAgICAgICBRIikuY29uY2F0KG1pZGRsZVhQb3MsICIsICIpLmNvbmNhdChjb250cm9sWVBvcywgIiAiKS5jb25jYXQobWlkZGxlWFBvcywgIiwiKS5jb25jYXQobWlkZGxlWVBvcywgIlxuICAgICAgICAgIE0iKS5jb25jYXQobWlkZGxlWFBvcywgIiwiKS5jb25jYXQobWlkZGxlWVBvcywgIlxuICAgICAgICAgIFEiKS5jb25jYXQobWlkZGxlWFBvcywgIiwgIikuY29uY2F0KGNvbnRyb2xZUG9zLCAiICIpLmNvbmNhdChyaWdodFhwb3MsICIsIikuY29uY2F0KHN2Z0JvdHRvbSwgIlxuICAgICAgICAgIEwiKS5jb25jYXQobGVmdFhQb3MsICIsICIpLmNvbmNhdChzdmdCb3R0b20sICJcbiAgICAgICAgICBaXG4gICAgICAgICIpOwogICAgICAgIHZhciB0ZXh0WSA9IChzdmdCb3R0b20gKyBtaWRkbGVZUG9zKSAvIDIgKyBmb250U2l6ZSAvIDI7CiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaXRlbSksIHt9LCB7CiAgICAgICAgICBkOiBkLAogICAgICAgICAgeDogbWlkZGxlWFBvcywKICAgICAgICAgIHk6IG1pZGRsZVlQb3MsCiAgICAgICAgICB0ZXh0WTogdGV4dFkKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["main.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,OAAA,UAAA,MAAA,2BAAA;AAEA,SAAA,SAAA,QAAA,kCAAA;AAEA,SAAA,SAAA,QAAA,qCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,sBADA;AAEA,EAAA,MAAA,EAAA,CAAA,UAAA,CAFA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA;AADA,GAHA;AASA,EAAA,IATA,kBASA;AACA,WAAA;AACA,MAAA,GAAA,EAAA,sBADA;AAGA,MAAA,aAAA,EAAA;AACA;AACA;AACA;AACA;AACA;AACA,QAAA,IAAA,EAAA,EANA;;AAOA;AACA;AACA;AACA;AACA;AACA,QAAA,GAAA,EAAA,EAZA;;AAaA;AACA;AACA;AACA;AACA;AACA,QAAA,QAAA,EAAA,EAlBA;;AAmBA;AACA;AACA;AACA;AACA;AACA,QAAA,aAAA,EAAA,EAxBA;;AAyBA;AACA;AACA;AACA;AACA;AACA,QAAA,WAAA,EAAA,wBA9BA;;AA+BA;AACA;AACA;AACA;AACA;AACA,QAAA,SAAA,EAAA,MApCA;;AAqCA;AACA;AACA;AACA;AACA;AACA,QAAA,SAAA,EAAA;AA1CA,OAHA;AAgDA,MAAA,YAAA,EAAA,IAhDA;AAkDA,MAAA,MAAA,EAAA;AAlDA,KAAA;AAoDA,GA9DA;AA+DA,EAAA,KAAA,EAAA;AACA,IAAA,MADA,oBACA;AACA,UAAA,QAAA,GAAA,IAAA,CAAA,QAAA;AAEA,MAAA,QAAA;AACA;AALA,GA/DA;AAsEA,EAAA,OAAA,EAAA;AACA,IAAA,wBADA,sCACA;AACA,UAAA,QAAA,GAAA,IAAA,CAAA,QAAA;AAEA,MAAA,QAAA;AACA,KALA;AAMA,IAAA,QANA,sBAMA;AACA,UAAA,QAAA,GAAA,IAAA,CAAA,QAAA;AAEA,MAAA,QAAA;AACA,KAVA;AAWA,IAAA,QAXA,sBAWA;AACA,UAAA,WAAA,GAAA,IAAA,CAAA,WAAA;AAAA,UAAA,QAAA,GAAA,IAAA,CAAA,QAAA;AAAA,UAAA,WAAA,GAAA,IAAA,CAAA,WAAA;AAEA,MAAA,WAAA;AAEA,MAAA,QAAA;AAEA,MAAA,WAAA;AACA,KAnBA;AAoBA,IAAA,WApBA,yBAoBA;AACA,UAAA,aAAA,GAAA,IAAA,CAAA,aAAA;AAAA,UAAA,MAAA,GAAA,IAAA,CAAA,MAAA;AAEA,WAAA,YAAA,GAAA,SAAA,CAAA,SAAA,CAAA,aAAA,EAAA,IAAA,CAAA,EAAA,MAAA,IAAA,EAAA,CAAA;AACA,KAxBA;AAyBA,IAAA,QAzBA,sBAyBA;AACA,UAAA,YAAA,GAAA,IAAA,CAAA,YAAA;AACA,UAAA,IAAA,GAAA,YAAA,CAAA,IAAA;AAEA,MAAA,IAAA,GAAA,SAAA,CAAA,IAAA,EAAA,IAAA,CAAA;AAEA,MAAA,IAAA,CAAA,IAAA,CAAA,uBAAA;AAAA,YAAA,CAAA,QAAA,KAAA;AAAA,YAAA,CAAA,SAAA,KAAA;AACA,YAAA,CAAA,GAAA,CAAA,EAAA,OAAA,CAAA,CAAA;AACA,YAAA,CAAA,GAAA,CAAA,EAAA,OAAA,CAAA;AACA,YAAA,CAAA,KAAA,CAAA,EAAA,OAAA,CAAA;AACA,OAJA;AAMA,UAAA,GAAA,GAAA,IAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,CAAA,CAAA,CAAA,KAAA,GAAA,EAAA;AAEA,MAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,UAAA,IAAA;AAAA,+CACA,IADA;AAEA,UAAA,OAAA,EAAA,IAAA,CAAA,KAAA,GAAA;AAFA;AAAA,OAAA,CAAA;AAKA,MAAA,YAAA,CAAA,IAAA,GAAA,IAAA;AACA,KA7CA;AA8CA,IAAA,WA9CA,yBA8CA;AACA,UAAA,YAAA,GAAA,IAAA,CAAA,YAAA;AAAA,UAAA,KAAA,GAAA,IAAA,CAAA,KAAA;AAAA,UAAA,MAAA,GAAA,IAAA,CAAA,MAAA;AAEA,UAAA,aAAA,GAAA,YAAA,CAAA,aAAA;AAAA,UAAA,QAAA,GAAA,YAAA,CAAA,QAAA;AAAA,UAAA,IAAA,GAAA,YAAA,CAAA,IAAA;AAEA,UAAA,OAAA,GAAA,IAAA,CAAA,MAAA;AACA,UAAA,GAAA,GAAA,KAAA,IAAA,OAAA,GAAA,CAAA,CAAA;AAEA,UAAA,aAAA,GAAA,MAAA,GAAA,aAAA,GAAA,QAAA,GAAA,CAAA;AACA,UAAA,SAAA,GAAA,MAAA,GAAA,QAAA,GAAA,CAAA;AAEA,WAAA,MAAA,GAAA,IAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA,CAAA,EAAA;AACA,YAAA,OAAA,GAAA,IAAA,CAAA,OAAA;AAEA,YAAA,UAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA;AACA,YAAA,QAAA,GAAA,GAAA,GAAA,CAAA;AACA,YAAA,SAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA;AAEA,YAAA,UAAA,GAAA,SAAA,GAAA,aAAA,GAAA,OAAA;AACA,YAAA,WAAA,GAAA,aAAA,GAAA,OAAA,GAAA,GAAA,GAAA,UAAA;AAEA,YAAA,CAAA,0BACA,QADA,eACA,SADA,0BAEA,UAFA,eAEA,WAFA,cAEA,UAFA,cAEA,UAFA,0BAGA,UAHA,cAGA,UAHA,0BAIA,UAJA,eAIA,WAJA,cAIA,SAJA,cAIA,SAJA,0BAKA,QALA,eAKA,SALA,4BAAA;AASA,YAAA,KAAA,GAAA,CAAA,SAAA,GAAA,UAAA,IAAA,CAAA,GAAA,QAAA,GAAA,CAAA;AAEA,+CACA,IADA;AAEA,UAAA,CAAA,EAAA,CAFA;AAGA,UAAA,CAAA,EAAA,UAHA;AAIA,UAAA,CAAA,EAAA,UAJA;AAKA,UAAA,KAAA,EAAA;AALA;AAOA,OA5BA,CAAA;AA6BA;AAtFA;AAtEA,CAAA","sourcesContent":["<template>\n  <div class=\"dv-conical-column-chart\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <g\n        v-for=\"(item, i) in column\"\n        :key=\"i\"\n      >\n        <path\n          :d=\"item.d\"\n          :fill=\"mergedConfig.columnColor\"\n        />\n        <text\n          :style=\"`fontSize:${mergedConfig.fontSize}px`\"\n          :fill=\"mergedConfig.textColor\"\n          :x=\"item.x\"\n          :y=\"height - 4\"\n        >\n          {{ item.name }}\n        </text>\n        <image\n          v-if=\"mergedConfig.img.length\"\n          :xlink:href=\"mergedConfig.img[i % mergedConfig.img.length]\"\n          :width=\"mergedConfig.imgSideLength\"\n          :height=\"mergedConfig.imgSideLength\"\n          :x=\"item.x - mergedConfig.imgSideLength / 2\"\n          :y=\"item.y - mergedConfig.imgSideLength\"\n        />\n        <text\n          v-if=\"mergedConfig.showValue\"\n          :style=\"`fontSize:${mergedConfig.fontSize}px`\"\n          :fill=\"mergedConfig.textColor\"\n          :x=\"item.x\"\n          :y=\"item.textY\"\n        >\n          {{ item.value }}\n        </text>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvConicalColumnChart',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'conical-column-chart',\n\n      defaultConfig: {\n        /**\n         * @description Chart data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Chart img\n         * @type {Array<String>}\n         * @default img = []\n         */\n        img: [],\n        /**\n         * @description Chart font size\n         * @type {Number}\n         * @default fontSize = 12\n         */\n        fontSize: 12,\n        /**\n         * @description Img side length\n         * @type {Number}\n         * @default imgSideLength = 30\n         */\n        imgSideLength: 30,\n        /**\n         * @description Column color\n         * @type {String}\n         * @default columnColor = 'rgba(0, 194, 255, 0.4)'\n         */\n        columnColor: 'rgba(0, 194, 255, 0.4)',\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Show value\n         * @type {Boolean}\n         * @default showValue = false\n         */\n        showValue: false\n      },\n\n      mergedConfig: null,\n\n      column: []\n    }\n  },\n  watch: {\n    config () {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { calcData } = this\n\n      calcData()\n    },\n    calcData () {\n      const { mergeConfig, initData, calcSVGPath } = this\n\n      mergeConfig()\n\n      initData()\n\n      calcSVGPath()\n    },\n    mergeConfig () {\n      const { defaultConfig, config } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    initData () {\n      const { mergedConfig } = this\n      let { data } = mergedConfig\n\n      data = deepClone(data, true)\n\n      data.sort(({ value: a }, { value: b }) => {\n        if (a > b) return -1\n        if (a < b) return 1\n        if (a === b) return 0\n      })\n\n      const max = data[0] ? data[0].value : 10\n\n      data = data.map(item => ({\n        ...item,\n        percent: item.value / max\n      }))\n\n      mergedConfig.data = data\n    },\n    calcSVGPath () {\n      const { mergedConfig, width, height } = this\n\n      const { imgSideLength, fontSize, data } = mergedConfig\n\n      const itemNum = data.length\n      const gap = width / (itemNum + 1)\n\n      const useAbleHeight = height - imgSideLength - fontSize - 5\n      const svgBottom = height - fontSize - 5\n\n      this.column = data.map((item, i) => {\n        const { percent } = item\n\n        const middleXPos = gap * (i + 1)\n        const leftXPos = gap * i\n        const rightXpos = gap * (i + 2)\n\n        const middleYPos = svgBottom - useAbleHeight * percent\n        const controlYPos = useAbleHeight * percent * 0.6 + middleYPos\n\n        const d = `\n          M${leftXPos}, ${svgBottom}\n          Q${middleXPos}, ${controlYPos} ${middleXPos},${middleYPos}\n          M${middleXPos},${middleYPos}\n          Q${middleXPos}, ${controlYPos} ${rightXpos},${svgBottom}\n          L${leftXPos}, ${svgBottom}\n          Z\n        `\n\n        const textY = (svgBottom + middleYPos) / 2 + fontSize / 2\n\n        return {\n          ...item,\n          d,\n          x: middleXPos,\n          y: middleYPos,\n          textY\n        }\n      })\n    }\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/conicalColumnChart/src"}]}